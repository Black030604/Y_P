                           Основные понятия ООП

Классы являются основными строительными блоками ООП. Они определяют структуру и поведение объектов. Класс содержит поля, методы и свойства.
Описание класса:

сlass имя_класса
{
// составляюшие класса
}

Класс может хранить некоторые данные. Поля – это данные класса, они представляются переменными. 
Например: int field;
Свойства объекта – это средство доступа к полям, позволяющие изменить его данные и выполнить его код.
Например:

int Property {get; set;}

Для определения поведения в классе применяются методы. Методы описывают действия над данными класса. 
Пример класса:

class DemoClass
{
  int field;
  int Property {get; set;}
  void Method()
  { Console.WriteLine(“Method); } 
}

Модификаторы доступа позволяют задать допустимую область видимости для компонентов класса. Основные модификаторы доступа:
- private (личный, приватный компонент класса или структуры) приватный компонент доступен только в рамках своего класса или структуры.
- protected (доступен в своем классе и в потомках этого класса) потомки могут располагаться в других сборках.
- public (открытый, общий компонент класса или структуры) компонент доступен из любого места кода, а так же из других программ и сборках.
- internal компоненты класса или структуры доступны из любого места кода в той же сборке, однако он недоступен для других программ и сборок.
Если модификатор не указан, то будет использоваться private. 
Поля класса объявляются с модификатором private, методы и свойства класса с модификатором  public.

class DemoClass
{
private int field = 0;
public int Property {get;set;}
public void Method()
{ ConsoleWriteLine(“Method”); }
}

Метод – это именованный блок кода, который выполняет некоторые действия. Общий вид метода:

модификатор тип  имя_метода (формальные параметры)
{  // тело метода }

Тип – тип возвращаемого результата.
Формальный параметр – это список применяемых с указанием их типа в заголовке метода. Тип параметра может  быть любой. Переменные в списке определяются запятой.
Тело – последовательность операторов, заключенная в фигурные скобки. Переменные, описанные в блоке, считаются локализованными в этом блоке.
Вызов метода имеет вид:

имя_метода (фактические параметры)

Фактические параметры – это список параметров при вызове метода.
Существует два вида методов:
- методы, которые не возвращают никакого значения.
- методы, которые возвращают значение.

Методы, не возвращающие  значения, имеют тип void. Вызов этого метода осуществляется отдельным оператором. 
Например:

 static void Foo (int p)
 { 
p = p + 1;                     // Увеличить p на 1
Console.WriteLine (p); // Вывести значение p на экран 
} 
static void Main() 
{
 	Foo (8); 		// Вызвать Foo с аргументом 8
}

Методы, возвращающие значение, применяют оператор return, после которого идет возвращение значения. Этот метод вызывается в выражениях.
Например:

 double Increment (double n) // объявление метода
{ return n++;}
// вызов метода
double x=Increment (5);

Различают статические методы и методы объекта. Статические методы имеют модификатор static перед именем метода и принадлежат к классу:

static double Gipotenuza(double a, double b)
{
return Math.Sqrt(a*a+b*b);
}

Для вызова таких методов необязательно создавать экземпляр класса Для вызова метода объекта необходимо предварительно создать экземпляр класса (объект).  
Существуют два способа передачи параметров в метод: по значению и по ссылке. При передаче аргументов по значению, параметр метода получает не саму переменную, а ее копию и далее работает с этой копией независимо от самой переменной. Параметр по значению описывается как обычная переменная.
При передачи параметров по ссылке перед параметрами используется модификатор ref. При передаче значений параметрам по ссылке, метод получает адрес переменной в памяти и может изменять значение переменной.

void Increment (ref int n)
{n++;}

Чтобы сделать параметр выходным, перед ним ставится модификатор out. Методы, используемые такие параметры, обязательно должны присваивать им определенное значение.

void Sum(int x, int y, out int result)
{ result=x+y; }

Метод процедура Sum имеет три формальных параметра,  result – выходная величина.
При вызове метода количество используемых фактических параметров, совпадают с количеством формальных параметров в описание метода. Но если нужно использовать большое количество фактических параметром чем формальных, то для последнего формального параметра нужно использовать статус params, тогда при вызове дополнительных фактических параметров будут соответствовать этому формальному параметру, так как он будет восприниматься как массив параметров.
При вызове метода указывается список фактических параметров. В качестве формальных параметров метода выступают переменные, а в качестве фактических параметров могут выступать выражения. Если формальный параметр имеет статус ref или out, то соответствующий фактический параметр должен сопровождаться таким же ключевым словом. 
Между формальными и фактическими параметрами должно быть соответствие по количеству, порядку следования, статусу и типу параметров.
При использовании ссылочных типов для параметров даже при вызове по значению осуществляется вызов по ссылке, что приводит к изменению данных в вызывающей программе.

